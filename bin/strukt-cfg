#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);

$autoloadFiles = array(__DIR__ . '/../vendor/autoload.php',
                       __DIR__ . '/../../../autoload.php');

foreach($autoloadFiles as $autoloadFile)
    if(file_exists($autoloadFile))
        require_once $autoloadFile;

Strukt\Fs::rmdir('app');
Strukt\Fs::rmdir('lib/App');
Strukt\Fs::rmdir('cfg');
Strukt\Fs::rmdir('.tpl');
Strukt\Fs::rm('.env');
Strukt\Fs::rm('bootstrap');
Strukt\Fs::rm('index.php');
Strukt\Fs::rm('xcli');

Strukt\Fs::mkdir("cfg");
Strukt\Fs::mkdir(".tpl/sgf/cfg");
Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Controller");
Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Form");
Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Router");
Strukt\Fs::mkdir(".tpl/sgf/app/src/App/AuthModule/Tests");
Strukt\Fs::mkdir(".tpl/sgf/lib/App");
Strukt\Fs::mkdir(".tpl/sgf/src/Strukt/Package");
Strukt\Fs::mkdir("lib/App/Contract");
Strukt\Fs::mkdir("lib/App/Middleware");
Strukt\Fs::mkdir("lib/App/Provider");

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Controller/User.sgf", '<?php
namespace {{app}}\AuthModule\Controller;

class User extends \Strukt\Framework\Contract\Controller{

	public function find($id){

		return "Couldn\'t find User:[id] - AuthModule\Controller\User::find Not Yet Implemented!";
	}

	public function getAll(){

		return "AuthModule\Controller\User::getAll Not Yet Implemented!";
	}

	public function doAuth($username, $password){

		$user = $this->get("User", array($username, $password));

		return $user->getUsername() == "admin" && $user->getPassword() == sha1("p@55w0rd");
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Form/User.sgf", '<?php
namespace {{app}}\AuthModule\Form;

class User extends \Strukt\Framework\Contract\Form{
	
	/**
	* @IsNotEmpty()
	* @IsAlpha()
	*/
	public string $username;

	/**
	* @IsNotEmpty()
	*/
	public string $password;
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/User.sgf", '<?php
namespace {{app}};

class User{

	private $id;
	private $username;
	private $password;

	public function __construct($username, $password){

		$this->username = $username;
		$this->password = sha1($password);
	}

	public function getId(){

		return $this->id;
	}

	public function setId($id){
		
		$this->id = $id;
	}

	public function getUsername(){
		
		return $this->username;
	}

	public function setUsername($username){
		
		$this->username = $username;
	}

	public function getPassword(){
		
		return $this->password;
	}

	public function setPassword($password){
		
		$this->password = sha1($password);
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Router/Auth.sgf", '<?php

namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response\Plain as Response;

class Auth extends \Strukt\Framework\Contract\Router{

	/**
	* @Route(/login)
	* @Method(POST)
	* @Form(User)
	*/
	public function login(Request $request){

		$username = $request->get("username");
		$password = $request->get("password");

		if($this->get("au.ctr.User")->doAuth($username, $password)){

	    	new \Strukt\Auth($username);
	    	// new \Strukt\Auth($username, "user_type:admin|status:chilled-out");

	       	return response()->json(array(

	            "success"=>true, 
	            "message"=>"User successfully authenticated."
	        ));
	    }
	
        return response()->json(array(

            "success"=>false,
            "message"=>"Failed to authenticate user!"
        ));
	}

	/**
	* @Route(/current/user)
	* @Method(POST)
	*/
	public function currentUser(Request $request){

		$user = $request->getUser();

		return new Response($user->getUsername());
		// return new Response(sprintf("%s %s", $user->getUsername(), $user->getToken());
	}

	/**
	* @Route(/logout)
	* @Method(POST)
	*/
	public function logout(Request $request){

		$request->getSession()->invalidate();

		return "Successfully logged out.";
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Router/Index.sgf", '<?php
namespace {{app}}\AuthModule\Router;

use Strukt\Http\Request;
use Strukt\Http\Response\Plain as Response;

class Index extends \Strukt\Framework\Contract\Router{

	/**
	* @Route(/)
	* @Method(GET)
	*/
	public function welcome(){
		
		return "</b>Strukt Works!<b>";
	}

	/**
	* @Route(/hello/world)
	* @Method(GET)
	*/
	public function helloWorld(){

		//return $this->core()->get("assets")->get("/index.html");
		return response()->body(fs("public/static")->cat("index.html"));
	}
	
	/**
	* @Route(/hello/{name:alpha})
	* @Method(GET)
	*/
	public function helloTo($name, Request $request){

		return sprintf("<b>Hello %s!</b>", $name);	
	}

	/**
	* @Route(/users/all)
	* @Permission(user_all)
	* @Method(GET)
	*/
	public function getAllUsers(){
		
		return $this->get("au.ctr.User")->getAll();
	}

	/**
	* @Route(/user)
	* @Method(GET)
	* @Auth()
	*/
	public function getUser(Request $request){

		$id = $request->query->get("id");

		return $this->get("au.ctr.User")->find($id);
	}

	/**
	* @Route(/test)
	* @Method(GET)
	*/
	public function testException(){

		throw new \RuntimeException("Whoops!");
	}	
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/_AuthModule.sgf", '<?php
namespace {{app}}\AuthModule;

class {{app}}AuthModule extends \Strukt\Framework\Contract\Module{

	protected $alias="Au";
}


');

Strukt\Fs::touchWrite(".tpl/sgf/app/src/App/AuthModule/Tests/UserTest.sgf", '<?php
namespace {{app}}\AuthModule\Tests;

// use Strukt\Core\Registry;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase{

	public function setUp():void{
	
		// $this->core = Registry::getInstance()->get("core");
	}

	public function testDoAuth(){

		$username = "admin";
		$password = "p@55w0rd";

		$isSuccess = true;
		// $isSuccess = $this->core->get("au.ctr.User")->doAuth($username, $password);

		$this->assertTrue($isSuccess);
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/src/Strukt/Package/Pkg_.sgf", '<?php

namespace Strukt\Package;

class Pkg{{name}} implements Strukt\Framework\Contract\Package{

	private $manifest;

	public function __construct(){

		$this->manifest = array(
			"cmd_name"=>"{{name}}",
			"package"=>"pkg-{{lower_name}}",
			"files"=>array()
		);
	}

	public function getSettings($type){

		$settings = array(
			"App:Cli"=>array(
				"providers"=>array(),
				"middlewares"=>array(),
				"commands"=>array()
			),
			"App:Idx"=>array(
				"providers"=>array(),
				"middlewares"=>array()
			)
		);

		return $settings[$type];
	}

	public function getName(){

		return $this->manifest["package"];
	}

	public function getCmdName(){

		return $this->manifest["cmd_name"];
	}

	public function getFiles(){

		return $this->manifest["files"];
	}

	public function getModules(){

		return null;
	}

	/**
	* Use php\'s class_exists function to identify a class that indicated your package is installed
	*/
	public function isPublished(){

		//This will return false because SomeClass::class shouldn\'t exists
		return class_exists(\SomeClass::class);
	}

	public function getRequirements(){
		
		return null;
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/lib/App/Loader.sgf", '<?php
namespace App;

use Strukt\Router\Kernel as RouterKernel;

/**
*	Application Loader Class
*
*	WARNING: THIS FILE IS AUTO-GENERATED. 
*			   DO NOT ADD ANYTHING BECAUSE 
*			   IT WILL BE OVERWRITTEN
*
*	@author Moderator <pitsolu@gmail.com>
*/
class Loader{

	private $app;

	/**
	* Constructor
	*	
	* Initialize Strukt Framework
	*/
	public function __construct(RouterKernel $router=null){

		$this->app = new \Strukt\Framework\Application($router);
		{{packages}}
	}

	/**
	* Getter for Strukt Application
	*/
	public function getApp():\Strukt\Framework\Application{

		return $this->app;
	}
}


');

Strukt\Fs::touchWrite(".tpl/sgf/cfg/app.sgf", 'app-name = {{app}}
middlewares[] = auth
middlewares[] = authz
middlewares[] = except
middlewares[] = xsess
middlewares[] = sess
middlewares[] = valid
; middlewares[] = asset
; middlewares[] = cors
providers[] = valid
; providers[] = logger
; providers[] = sch-mgr
; providers[] = ent-mgr
; providers[] = doc-adp
; providers[] = nmlz
; providers[] = strukt.asset


');

Strukt\Fs::touchWrite("lib/App/Contract/AbstractCommand.php", '<?php

namespace App\Contract;

abstract class AbstractCommand extends \Strukt\Console\Command{

	// use CoreTraits;
}




');

Strukt\Fs::touchWrite("lib/App/Middleware/Cors.php", '<?php

namespace App\Middleware;

use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;
use Strukt\Contract\MiddlewareInterface;

/**
* Name(cors)
*/
class Cors implements MiddlewareInterface{

	public function __construct(){

		//
	}

	public function __invoke(RequestInterface $request, ResponseInterface $response, callable $next){

    	header("Access-Control-Allow-Origin: *");
		header("Access-Control-Allow-Headers: *");
		header("Access-Control-Allow-Methods: *");

    	return $next($request, $response);
	}
}




');

Strukt\Fs::touchWrite("lib/App/Middleware/XSession.php", '<?php

namespace App\Middleware;

use Strukt\Contract\MiddlewareInterface;
use Strukt\Contract\Http\ResponseInterface;
use Strukt\Contract\Http\RequestInterface;

/**
* @Name(xsess)
* @Inject(session)
*/
class XSession implements MiddlewareInterface{

	private $session;
	private static $options = [];

	public function __construct(){

		$this->session = event("@inject.session")->exec();
	}

	public static function config(array $options){

		// self::$options = $options;

		// $permissions = ["permissions"=>[]];

		// if(array_key_exists("allow", $options)){

		// 	$perms = $options["allow"];
		// 	if(!is_null($perms))
		// 		$permissions["permissions"] = $perms;
		// }

		// reg()->remove("@strukt.permissions");
		// reg("@strukt", $permissions);
	}

	public function __invoke(RequestInterface $request, ResponseInterface $response, callable $next){

		$this->session->start();
		foreach(self::$options as $key=>$val)
			$this->session->set($key, $val);

		if($this->session->has("username"));
			$request->setUser(new \Strukt\User(self::$options["username"]));

		$request->setSession($this->session);

		return $next($request, $response);
	}
}




');

Strukt\Fs::touchWrite("lib/App/Provider/Logger.php", '<?php

namespace App\Provider;

use Monolog\Logger as Monolog;
use Monolog\Handler\StreamHandler;
use Strukt\Contract\ProviderInterface;
use Strukt\Env;

/**
* @Name(logger)
*/
class Logger implements ProviderInterface{ 

	public function __construct(){

		//
	}

	public function register(){

		event("provider.logger", function(string $logger_name, string $log_file, $log_type = Monolog::INFO){

			$logger = new Monolog($logger_name);
			$logger->pushHandler(new StreamHandler($log_file, $log_type));

			return $logger;
		});

		event("service.logger", new class(){

			public function info($message, array $context = []){

				$logger = event("provider.logger")->apply(env("logger_name"), env("logger_file"))->exec();
				$logger->info($message, $context);
			}

			public function error($message, array $context = []){

				$logger = event("provider.logger")
							->apply(env("logger_name"), env("logger_file"),Monolog::ERROR)
							->exec();

				$logger->error($message, $context);
			}
		});	
	}
}




');

Strukt\Fs::touchWrite("lib/App/Validator.php", '<?php

namespace App;

use Strukt\Framework\Contract\Validator as ValidatorContract;
use Strukt\Traits\Validator as ValidatorTraits;

/**
* Validator Extra
* 
* This as class you can use to add your custom validators
*
* @author Moderator <pitsolu@gmail.com>
*/
class Validator extends ValidatorContract{

	use ValidatorTraits;

	public function isLenGt($len){

		$this->message["is_gt"] = false;
		if(strlen($this->getValue()) > $len)
			$this->message["is_gt"] = true;

		return $this;
	}
}




');

Strukt\Fs::touchWrite("cfg/module.ini", '[folders]
folder["ctr"] = "Controller"
folder["rtr"] = "Router"
folder["frm"] = "Form"
folder["tes"] = "Tests"
; folder["fix"] = "Fixture"
; folder["rep"] = "Repository"
; folder["sdr"] = "Seeder"




');

Strukt\Fs::touchWrite("cfg/repo.ini", 'core = Core
pkg-do = PkgDo
pkg-roles = PkgRoles
pkg-book = PkgBook
pkg-tests = PkgTests
pkg-asset = PkgAsset




');

Strukt\Fs::touchWrite("cfg/cmd.ini", 'pub-pak.title = Package Publisher
pub-pak.cmd[] = package:publish
pub-pak.cmd[] = package:ls
pub-pak.cmd[] = package:info
; pub-mak.title = Package Maker
; pub-mak.cmd[] = package:make
; pub-mak.cmd[] = package:add
; pub-mak.cmd[] = package:copy
; pub-mak.cmd[] = package:export
; pkg-tests.title = PhpUnit Testing
; pkg-tests.cmd[] = test:run
; pkg-tests.cmd[] = test:ls
; pkg-roles.title = RBAC
; pkg-roles.cmd[] = perm:add
; pkg-roles.cmd[] = role:add
; pkg-roles.cmd[] = role:add:perm
; pkg-roles.cmd[] = user:add
; pkg-roles.cmd[] = user:dumpcred
; pkg-roles.cmd[] = user:reset
; pkg-do.title = Doctrine
; pkg-do.cmd[] = make:models   
; pkg-do.cmd[] = make:db        
; pkg-do.cmd[] = make:migration 
; pkg-do.cmd[] = make:seeder    
; pkg-do.cmd[] = migrate:exec   
; pkg-do.cmd[] = seeder:exec    
; pkg-do.cmd[] = sql:exec
; pkg-asset.title = Asset
; pkg-asset.cmd[] = md:html
');

Strukt\Fs::touchWrite("lib/App/Kernel.php", '<?php

namespace App;

use Strukt\Framework\Configuration;
use Strukt\Router\Kernel as RouterKernel;
use Strukt\Http\Request;
// use Strukt\Core\Registry;

use App\Loader as AppLoader;

// use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class Kernel{

	private $kernel;
	private $config;
	private $loader;
	private $app;

	public function __construct(Configuration $config, ServerRequestInterface $request = null){

		$this->config = $config;

		if(is_null($request))
			$request = Request::createFromGlobals();

		$this->kernel = new RouterKernel($request);

		$kconfigs = $config->getInjectables()->getConfigs();
		if(!empty($kconfigs))
			foreach($kconfigs as $key=>$kconfig)
				$this->kernel->inject($key, $kconfig);
			
		$this->kernel->providers($this->config->get("providers"));
		$this->kernel->middlewares($this->config->get("middlewares"));

		if(class_exists(AppLoader::class)){

			$this->loader = new AppLoader($this->kernel);
			$this->app =  $this->loader->getApp();

			// $registry = Registry::getSingleton();
			// $registry->set("module-list", serialize($this->app->getModuleList()));
		}
	}

	public function getConfig():\Strukt\Framework\Configuration{

		return $this->config;
	}

	public function getRouter():\Strukt\Router\Kernel{

		return $this->kernel;
	}

	public function getLoader():?\App\Loader{

		return $this->loader;
	}

	public function getApp():?\Strukt\Framework\Application{

		return $this->app;
	}

	public function run():void{
		
		return $this->app->run();
	}
}




');

Strukt\Fs::touchWrite("lib/App/Injectable.php", '<?php

namespace App;

use Strukt\User; 
use App\Util\Logger\Monologer;
use Strukt\Http\Session\Native as Session;
use Strukt\Http\Session\ArrayCache as XSession;
use Strukt\Contract\Http\SessionInterface;
use Strukt\Contract\UserInterface;
use Doctrine\DBAL\Logging\SQLLogger;
use Strukt\Traits\ClassHelper;

class Injectable{

	use ClassHelper;

	/**
	 * @Package(core)
	 * @Inject(permissions)
	 */
	public function getPkgCorePermissions(SessionInterface $session){

		// $permissions["permissions"] = [];
		$permissions = [];

		/**
		 * This permission enables Strukt\'s Auth Annotation
		 */
		if($session->has("username"))
			$permissions[] = "strukt:auth"; 
			// $permissions["permissions"][] = "strukt:auth"; 

		return $permissions;
	}

	/**
	 * @Package(pkg-roles)
	 * @Inject(permissions)
	 */
	public function getPkgRolesPermissions(SessionInterface $session){

		$permissions["permissions"] = [];

		if($session->has("username")){

			$userC = $this->newClass("{{app}}\AuthModule\Controller\User");
			$username = $session->get("username");
			$permissions["permissions"] = $userC->findPermissionsByUsername($username);
		}

		return $permissions;
	}

	/**
	 * @Package(core)
	 * @Inject(verify)
	 */
	public function getPkgCoreVerify(SessionInterface $session):UserInterface{

		$user = new \Strukt\User();
		$user->setUsername($session->get("username"));

		return $user;
	}

	/**
	 * @Package(core)
	 * @Inject(session)
	 */
	public function getPkgCoreSession():SessionInterface{

		if(config("app.type") == "App:Cli")
			return new XSession;

		return new Session;
	}

	/**
	 * @Package(pkg-do)
	 * @Inject(sqllogger)
	 */
	public function getPkgDoSqlLogger():SQLLogger{

		$log_dir = sprintf("%s/logs/", env("root_dir"));

		return new Monologer(null, null, $log_dir);
	}
}




');

Strukt\Fs::touchWrite("xcli", '#!/usr/bin/php
<?php

use Strukt\Framework\Shell;
use Strukt\Env;
// use Strukt\Framework\Package\Repos;
use Strukt\Framework\Configuration;

use App\Loader as AppLoader;
use App\Kernel as AppKernel;

$loader = require "bootstrap.php";
$loader->add("Schema", __DIR__."/database/schema");

Env::withFile();
Env::set("root_dir", getcwd());
Env::set("json.validation.err", true);

config("app.type","App:Cli");

$kernel = new App\Kernel(new Configuration());
$app = $kernel->getApp();

if(!is_null($app))
	$app->init();//->init();

$sh = new Shell();

exit($sh->run($_SERVER["argv"]));




');

Strukt\Fs::touchWrite("index.php", '<?php

use Strukt\Env;
use Strukt\Framework\Configuration;

require "bootstrap.php";

Env::withFile();
Env::set("root_dir", getcwd());
Env::set("json.validation.err", false);

config("app.type","App:Idx");

$kernel = new App\Kernel(new Configuration());
exit($kernel->run());




');

Strukt\Fs::touchWrite("bootstrap.php", '<?php

define("DS", DIRECTORY_SEPARATOR);

error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING);

$loader = require "vendor/autoload.php";

$collision = new \NunoMaduro\Collision\Provider();
$collision->register();

if(php_sapi_name() != "cli"){

	$whoops = new \Whoops\Run;
	$whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler);
	$whoops->register();
}

$paths = array(

	"App"=> __DIR__."/lib/",
	"Strukt"=>__DIR__."/src/",
	"Seed"=>__DIR__."/database/seeder/", 
	"Schema"=>__DIR__."/database/schema/"
);

if(file_exists("cfg/app.ini")){
	
	$cfg_app = parse_ini_file("cfg/app.ini");
	if(!is_null($cfg_app))
		$paths[$cfg_app["app-name"]] = __DIR__."/app/src/";
}

foreach($paths as $ns=>$dir)
		if(file_exists($dir))
			$loader->add($ns, $dir);

return $loader;




');

Strukt\Fs::touchWrite(".env", 'rel_appsrc_dir = app'.DS.'src'.DS.'
rel_tpl_dir = .tpl'.DS.'sgf
rel_tplapp_dir = .tpl'.DS.'sgf'.DS.'app'.DS.'
rel_tplappsrc_dir = .tpl'.DS.'sgf'.DS.'app'.DS.'src'.DS.'
rel_tplauthmod_dir = .tpl'.DS.'sgf'.DS.'app'.DS.'src'.DS.'App'.DS.'AuthModule'.DS.'
rel_apptpl_ini = .tpl'.DS.'sgf'.DS.'cfg'.DS.'app.sgf
rel_loader_sgf = .tpl'.DS.'sgf'.DS.'lib'.DS.'App'.DS.'Loader.sgf
rel_app_lib = lib'.DS.'App
rel_static_dir = public'.DS.'static

rel_app_ini = cfg'.DS.'app.ini
rel_mod_ini = cfg'.DS.'module.ini
rel_db_ini = cfg'.DS.'db.ini
rel_repo_ini = cfg'.DS.'repo.ini
rel_cmd_ini = cfg'.DS.'cmd.ini

logger_name = Strukt Logger
logger_file = logs'.DS.'app.log

cli_app_name = Strukt Console
cli_label = Strukt
cli_app_dir = app
cli_file_name = xcli

is_dev = true
migration_ns = Schema\Migration
migration_home = database'.DS.'schema'.DS.'Schema'.DS.'Migration
seeder_home = database'.DS.'seeder'.DS.'Seed
seeder_ns = Seed
vendor_fw = '.DS.'vendor'.DS.'strukt'.DS.'

migration_sgf = .tpl'.DS.'sgf'.DS.'database'.DS.'schema'.DS.'Schema'.DS.'Migration'.DS.'Version_.php
seeder_sgf = .tpl'.DS.'sgf'.DS.'database'.DS.'seeder'.DS.'Seed'.DS.'NameVer.php
seeder_dir = database'.DS.'seeder'.DS.'Seed

serve_host = 127.0.0.1
serve_port = 8080
serve_ctx = .
serve_file = index.php




');

chmod('./xcli', 0755);